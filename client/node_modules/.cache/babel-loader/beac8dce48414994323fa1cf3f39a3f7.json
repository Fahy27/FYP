{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evanf\\\\Downloads\\\\Archive\\\\client\\\\src\\\\components\\\\Exam\\\\Exam.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from 'react';\nimport useStyles from './styles';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button } from '@material-ui/core';\nimport { api } from '../../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ADD_ENTRIES = 'ADD_ENTRIES';\nconst SET_SELECTED_ANSWER = 'SET_SELECTED_ANSWER';\nlet submitted = false;\n\nfunction selectedAnswersReducer(state, action) {\n  switch (action.type) {\n    case ADD_ENTRIES:\n      {\n        const newState = action.answers.map(answer => {\n          answer.answer = null;\n          return answer;\n        });\n        return newState;\n      }\n\n    case SET_SELECTED_ANSWER:\n      {\n        let stateCopy = [...state];\n        stateCopy[action.questionIdx].answer = action.newAnswer;\n        return stateCopy;\n      }\n  }\n}\n\nexport default function Exam() {\n  _s();\n\n  var _selectedAnswers$map;\n\n  const classes = useStyles();\n  const [selectedAnswers, dispatchSelectedAnswers] = useReducer(selectedAnswersReducer, null);\n  useEffect(() => {\n    async function loadQuestions() {\n      const fetchQuestions = await api.get(\"/questions/random\");\n      dispatchSelectedAnswers({\n        type: ADD_ENTRIES,\n        answers: fetchQuestions.data\n      });\n    }\n\n    loadQuestions();\n  }, []);\n\n  function handleRadioChange(event, questionIdx) {\n    dispatchSelectedAnswers({\n      type: SET_SELECTED_ANSWER,\n      questionIdx,\n      newAnswer: parseInt(event.target.value)\n    });\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (!submitted) {\n      // only send _id and answer\n      const answers = selectedAnswers.map(answer => {\n        return {\n          _id: answer._id,\n          answer: answer.answer\n        };\n      });\n\n      try {\n        submitted = true;\n        const fetchSubmit = await api.post(\"/questions/submitAnswers\", {\n          answers\n        });\n        alert(`You had ${fetchSubmit.data.correctAnswers} correct answers and have been awarded ${fetchSubmit.data.addedPoints} points`);\n      } catch (err) {\n        alert(err + \", are you signed in?\");\n        submitted = false;\n      }\n    }\n\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [(_selectedAnswers$map = selectedAnswers === null || selectedAnswers === void 0 ? void 0 : selectedAnswers.map((answer, questionIdx) => /*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        m: 3\n      },\n      variant: \"standard\",\n      className: `${classes.questionControl}`,\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        id: \"demo-error-radios\",\n        children: answer.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        \"aria-labelledby\": \"demo-error-radios\",\n        name: \"quiz\",\n        value: answer.answer,\n        onChange: e => {\n          handleRadioChange(e, questionIdx);\n        },\n        children: answer.answers.map((option, idx) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: idx,\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 79\n          }, this),\n          label: option\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 30\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, answer._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this))) !== null && _selectedAnswers$map !== void 0 ? _selectedAnswers$map : \"Loading...\", selectedAnswers != null && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Exam, \"kHuv8lieYwKl93R1DRDQclcyUgM=\", false, function () {\n  return [useStyles];\n});\n\n_c = Exam;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useEffect","useReducer","useStyles","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Button","api","ADD_ENTRIES","SET_SELECTED_ANSWER","submitted","selectedAnswersReducer","state","action","type","newState","answers","map","answer","stateCopy","questionIdx","newAnswer","Exam","classes","selectedAnswers","dispatchSelectedAnswers","loadQuestions","fetchQuestions","get","data","handleRadioChange","event","parseInt","target","value","handleSubmit","preventDefault","_id","fetchSubmit","post","alert","correctAnswers","addedPoints","err","m","questionControl","question","e","option","idx"],"sources":["C:/Users/evanf/Downloads/Archive/client/src/components/Exam/Exam.js"],"sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport useStyles from './styles';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button } from '@material-ui/core'\nimport { api } from '../../api/index'\n\nconst ADD_ENTRIES = 'ADD_ENTRIES'\nconst SET_SELECTED_ANSWER = 'SET_SELECTED_ANSWER'\n\nlet submitted = false\n\nfunction selectedAnswersReducer(state, action) {\n    switch(action.type) {\n        case ADD_ENTRIES: {\n            const newState = action.answers.map(answer => {\n                answer.answer = null\n                return answer\n            })\n            return newState\n        }\n        case SET_SELECTED_ANSWER: {\n            let stateCopy = [...state]\n            stateCopy[action.questionIdx].answer = action.newAnswer\n            return stateCopy\n        }\n    }\n}\n\n\nexport default function Exam() {\n    const classes = useStyles();\n    const [selectedAnswers, dispatchSelectedAnswers] = useReducer(selectedAnswersReducer, null)\n\n    useEffect(() => {\n        async function loadQuestions() {\n            const fetchQuestions = await api.get(\"/questions/random\")\n            dispatchSelectedAnswers({type: ADD_ENTRIES, answers: fetchQuestions.data})\n        }\n        loadQuestions()\n    }, [])\n\n    function handleRadioChange(event, questionIdx) {\n        dispatchSelectedAnswers({type: SET_SELECTED_ANSWER, questionIdx, newAnswer: parseInt(event.target.value)})\n    }\n    \n    async function handleSubmit (event) {\n        event.preventDefault();\n        if(!submitted) {\n            // only send _id and answer\n            const answers = selectedAnswers.map(answer => {\n                return {\n                    _id: answer._id, \n                    answer: answer.answer\n                }\n            })\n\n            try {\n                submitted = true\n                const fetchSubmit = await api.post(\"/questions/submitAnswers\", { answers })\n                alert(`You had ${fetchSubmit.data.correctAnswers} correct answers and have been awarded ${fetchSubmit.data.addedPoints} points`)\n            } catch(err) {\n                alert(err+\", are you signed in?\")\n                submitted = false\n            }       \n        }\n        return false\n    }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            {selectedAnswers?.map((answer, questionIdx) => (\n                <FormControl key={answer._id} sx={{ m: 3 }} variant=\"standard\" className={`${classes.questionControl}`}>\n                    <FormLabel id=\"demo-error-radios\">{answer.question}</FormLabel>\n                    <RadioGroup\n                        aria-labelledby=\"demo-error-radios\"\n                        name=\"quiz\"\n                        value={answer.answer}\n                        onChange={(e) => {handleRadioChange(e, questionIdx)}}\n                    >\n                        {answer.answers.map((option, idx) => \n                            (<FormControlLabel key={idx} value={idx} control={<Radio />} label={option} />)\n                        )}\n                    </RadioGroup>\n                </FormControl>\n            )) ?? \"Loading...\"}\n            {selectedAnswers != null && \n                (<Button variant=\"contained\" type=\"submit\">Submit</Button>)}\n            \n            \n        </form>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}